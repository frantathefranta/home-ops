---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALOS_DIR: "{{.KUBERNETES_DIR}}/bootstrap/talos"
  TALOSCONFIG: "{{.TALOS_DIR}}/clusterconfig/talosconfig"
  TALOS_SCRIPTS_DIR: "{{.ROOT_DIR}}/.taskfiles/Talos/scripts"
  TALHELPER_SECRET_FILE: "{{.TALOS_DIR}}/talsecret.sops.yaml"
  TALHELPER_CONFIG_FILE: "{{.TALOS_DIR}}/talconfig.yaml"
  # renovate: datasource=docker depName=ghcr.io/siderolabs/installer
  TALOS_VERSION: v1.7.2
  TALOS_SCHEMATIC_ID: 395a2c25f28a445eed24a30a3e5f078bfd733fd6677a06df942c16f45a445dd1
  # renovate: datasource=docker depName=ghcr.io/siderolabs/kubelet
  KUBERNETES_VERSION: v1.30.1

env:
  TALOSCONFIG: "{{.TALOS_DIR}}/clusterconfig/talosconfig"

tasks:
  bootstrap:
    desc: Bootstrap the Talos cluster
    dir: "{{.TALOS_DIR}}"
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    prompt: Bootstrap Talos on the '{{.cluster}}' cluster ... continue?
    cmds:
      - task: bootstrap-gensecret
      - task: bootstrap-genconfig
      - task: bootstrap-apply
        vars: &vars
          cluster: "{{.cluster}}"
      - task: bootstrap-install
      - task: fetch-kubeconfig
        vars: *vars
      - task: bootstrap-apps
        vars: *vars
      - talosctl health --server=false

  bootstrap-gensecret:
    desc: Generate the Talos secrets
    dir: "{{.TALOS_DIR}}"
    cmds:
      - talhelper gensecret > {{.TALHELPER_SECRET_FILE}}
      - task: :sops:.encrypt-file
        vars:
          file: "{{.TALHELPER_SECRET_FILE}}"
    preconditions:
      - {
          msg: "Missing talhelper config file",
          sh: "test -f {{.TALHELPER_CONFIG_FILE}}",
        }
    status:
      - test -f "{{.TALHELPER_SECRET_FILE}}"

  bootstrap-genconfig:
    desc: Generate the Talos configs
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper genconfig --secret-file {{.TALHELPER_SECRET_FILE}}
    preconditions:
      - {
          msg: "Missing talhelper config file",
          sh: "test -f {{.TALHELPER_CONFIG_FILE}}",
        }
      - {
          msg: "Missing talhelper secret file",
          sh: "test -f {{.TALHELPER_SECRET_FILE}}",
        }

  bootstrap-apply:
    desc: Apply the Talos configs to the nodes
    dir: "{{.TALOS_DIR}}"
    requires:
      vars: ["cluster"]
    cmd: talhelper gencommand apply --extra-flags="--insecure --cluster {{.cluster}}" | bash
    preconditions:
      - {
          msg: "Missing talhelper config file",
          sh: "test -f {{.TALHELPER_CONFIG_FILE}}",
        }

  bootstrap-install:
    desc: Install the Talos cluster
    dir: "{{.TALOS_DIR}}"
    cmds:
      - echo "Installing Talos... ignore the errors and be patient"
      - until talhelper gencommand bootstrap | bash; do sleep 10; done
      - sleep 10
    preconditions:
      - {
          msg: "Missing talhelper config file",
          sh: "test -f {{.TALHELPER_CONFIG_FILE}}",
        }

  bootstrap-apps:
    desc: Bootstrap core apps needed for Talos
    dir: "{{.TALOS_DIR}}"
    requires:
      vars: ["cluster"]
    cmds:
      - until kubectl --kubeconfig {{.KUBECONFIG_FILE}} --cluster {{.cluster}} wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --kubeconfig {{.KUBECONFIG_FILE}} --kube-context "{{.cluster}}" --file ./apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl --kubeconfig {{.KUBECONFIG_FILE}} --cluster {{.cluster}} wait --for=condition=Ready nodes --all --timeout=600s; do sleep 10; done
    preconditions:
      - { msg: "Missing kubeconfig", sh: "test -f {{.KUBECONFIG_FILE}}" }

  upgrade:
    desc: Upgrade Talos on a node
    cmd: bash {{.TALOS_SCRIPTS_DIR}}/upgrade.sh "{{.cluster}}" "{{.node}}" "{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}" "{{.rollout}}"
    vars:
      rollout: '{{.rollout | default "false"}}'
    requires:
      vars: ["cluster", "node"]
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/bootstrap/talos/clusterconfig/talosconfig
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1
      - talosctl --context {{.cluster}} --nodes {{.node}} get machineconfig >/dev/null 2>&1

  upgrade-talos:
    desc: Upgrade talos on a node
    cmd: talosctl --nodes {{.node}} upgrade --image {{.image}} --preserve=true --reboot-mode=default
    requires:
      vars: ["node", "image"]
    preconditions:
      - {
          msg: "Node not found",
          sh: "talosctl --nodes {{.node}} get machineconfig",
        }

  upgrade-k8s:
    desc: Upgrade the clusters k8s version
    cmd: talosctl --context {{.cluster}} --nodes {{.controller}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    vars:
      controller:
        sh: talosctl --context {{.cluster}} config info --output json | jq --raw-output '.endpoints[0]'
    requires:
      vars: ["cluster"]
    preconditions:
      - test -f {{.TALOSCONFIG}}
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1
      - talosctl --context {{.cluster}} --nodes {{.node}} get machineconfig >/dev/null 2>&1

  fetch-kubeconfig:
    desc: Generate talos kubeconfig
    dir: "{{.TALOS_DIR}}"
    cmd: until talhelper gencommand kubeconfig --extra-flags "{{.KUBERNETES_DIR}} --force" | bash; do sleep 10; done

  soft-nuke:
    desc: Resets nodes back to maintenance mode so you can re-deploy again straight after
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand reset --extra-flags "--reboot --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --wait=false" | bash

  hard-nuke:
    desc: Resets nodes back completely and reboots them
    prompt: This will destroy your cluster and reset the nodes... continue?
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand reset --extra-flags "--reboot --graceful=false --wait=false" | bash

  .reset:
    internal: true
    cmd: rm -rf {{.TALOS_DIR}}
